#!/bin/sh

# https://unix.stackexchange.com/questions/76505/unix-portable-way-to-get-scripts-absolute-path-in-zsh
scriptdir=$(cd -P -- "$(dirname -- "$0")" && printf '%s\n' "$(pwd -P)")
self="$scriptdir/$(basename -- "$0")"

libName="pogp_demo"
unityPackageId="com.pogp.unitypkg"
projectRoot="$scriptdir/.."
unityProjectDir="$projectRoot/unity/PogProtocolDemo"
unityPluginDir="$unityProjectDir/Assets/Plugins/Editor"
unityScriptsDir="$unityProjectDir/Assets/Scripts"
demoLibPath="$projectRoot/demo/target/debug/lib$libName.dylib"

case "$1" in
	build)
		$self install
		(cd rs && wasm-pack build)
		(cd demo && yarn build)
		;;

	bump)
		lastVersion=$(cat "$projectRoot/version")
		# https://stackoverflow.com/questions/8653126/how-to-increment-version-number-in-a-shell-script
		version=$(cat "$projectRoot/version" | awk -vFS=. -vOFS=. '{$NF++;print}')
		# https://stackoverflow.com/questions/38021348/how-can-i-echo-out-things-without-a-newline
		sed -i '' "s/$lastVersion/$version/g" version
		sed -i '' "s/$lastVersion/$version/g" "$projectRoot/demo/Cargo.toml"
		sed -i '' "s/$lastVersion/$version/g" "$projectRoot/rs/Cargo.toml"
		sed -i '' "s/$lastVersion/$version/g" "$projectRoot/ts/package.json"
		sed -i '' "s/$lastVersion/$version/g" "$projectRoot/ts/README.md"
		sed -i '' "s/$lastVersion/$version/g" "$unityProjectDir/Packages/$unityPackageId/package.json"
		sed -i '' "s/$lastVersion/$version/g" "README.md"
		echo "Bumped version to $version"
		;;

	dev)
		# link the ts npm package to the demo folder
		(cd ts && yarn link &> /dev/null)
		(cd demo && yarn link pogp &> /dev/null)

		# run three commands and kill all of them if the last one receives a ctrl+c
		# https://unix.stackexchange.com/questions/204480/run-multiple-commands-and-kill-them-as-one-in-bash
		trap 'kill %1; kill %2' SIGINT
		(cd ts && yarn watch) & $self unityWatch & (cd demo && yarn dev)
		trap - SIGINT
		;;

	install)
		which rustup > /dev/null || curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
		export PATH="$HOME/.cargo/bin:$PATH"
		which wasm-pack > /dev/null || curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
		which yarn > /dev/null || npm install --global yarn
		(cd ts && yarn)
		(cd demo && yarn)
		;;

	test)
		$self rtest || exit 1
		$self ttest || exit 1
		;;

	ttest)
		(cd ts && yarn test) || exit 1
		;;

	rtest)
		(cd rs && cargo test) || exit 1
		;;

	publish)
		(cd rs && cargo publish)
		;;

	unityWatch)
		(cd demo && cargo watch -w src -s "$self unityBuild")
		;;

	unityBuild)
		(cd "$projectRoot/demo" && cargo build)
		id=$(uuidgen)
		mkdir -p "$unityPluginDir"
		mkdir -p "$unityScriptsDir"
		# remove old generated files and metafiles
		# https://superuser.com/questions/1607629/how-to-suppress-error-messages-in-zsh
		(rm "$unityPluginDir/$libName"-*.dylib*) &> /dev/null
		cp "$demoLibPath" "$unityPluginDir/$libName-$id.dylib"

		tee > "$unityScriptsDir/PogpNativeVersion.cs" <<EOF
// Code generated by .bin/pog, do not edit manually
public static class PogpNativeVersion {
#if UNITY_EDITOR
	public const string LibName = "$libName-$id";
#else
	public const string LibName = "$libName";
#endif
}
EOF

		tee > "$unityScriptsDir/PogpNative.cs" << EOF
using System;
using System.Runtime.InteropServices;

// Code generated by .bin/pog, do not edit manually
// See https://blog.testdouble.com/posts/2018-07-31-complex-ffi-rust-unity-node/ for Baton idea
public static class PogpNative {
	public const string libName = PogpNativeVersion.LibName;

	[DllImport(libName)]
	public static extern void pogp_start(out IntPtr baton, out GameState g);

	[DllImport(libName)]
	public static extern GameState pogp_tick(IntPtr baton, long frame, byte[] inputs, int len);
}
EOF

		tee > "$unityScriptsDir/GameState.cs" << EOF
using System;
using System.Runtime.InteropServices;

[StructLayout(LayoutKind.Sequential)]
[Serializable]
public class GameState {
    public Paddle p0;
    public Paddle p1;
    public Ball ball;
    public Int32 p0Score;
    public Int32 p1Score;
}

[StructLayout(LayoutKind.Sequential)]
[Serializable]
public struct Paddle {
	public float x;
	public float y;
	public float w;
	public float h;
}

[StructLayout(LayoutKind.Sequential)]
[Serializable]
public struct Ball {
	public float x;
	public float y;
	public float w;
	public float h;
	public Vector2 v;
}

[StructLayout(LayoutKind.Sequential)]
[Serializable]
public struct Vector2 {
	public float x;
	public float y;
}
EOF
		;;

	adv)
		echo "🆙 pog bump       - bump version number"
		echo "💾 pog install    - install dependencies"
		echo "🗑  pog unityBuild - build for unity"
		echo "🗑  pog unityWatch - watch unity"
		;;

	*)
		echo "⚙️  pog adv     - show advanced commands"
		echo "🏗  pog build   - build for web deployment"
		echo "🚢 pog publish - publish pogp libraries"
		echo "🛠  pog dev     - live reload of rust and typescript"
		echo "✅ pog test    - run unit tests"
		;;
esac
